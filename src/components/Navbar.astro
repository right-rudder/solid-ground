---
import LogoSolidGroundAviation from "../components/LogoSolidGroundAviation.astro";

export type MenuItem = {
  label: string;
  url: string;
  children?: MenuItem[];
};

export type NavbarButton = {
  text: string;
  href: string;
  style: "btn-main" | "btn-second" | "btn-enroll";
};

export const menu: MenuItem[] = [
  { label: "Home", url: "#", children: [{ label: "Solid Ground Aviation", url: "/" }, { label: "Flight Animation", url: "/homepage-animation" }] },
  { label: "About Us", url: "#", children: [{ label: "About Us", url: "/#" }, { label: "Team", url: "/#" },{ label: "Partners", url: "/#" }, { label: "FAQ", url: "/#" }, { label: "Blog", url: "/#" }] },
  { label: "Training", url: "#", children: [{ label: "Ground School", url: "/#" }, { label: "Student Pilots", url: "/#" }, { label: "Licensed Pilots", url: "/#" }, { label: "Instrument Currency", url: "/#" }] },
  
];

export const buttons: NavbarButton[] = [
  { text: "Enroll Now", href: "/##", style: "btn-enroll" },
];
---

<nav id="navbar" class="navbar">
  <div class="container">
    <!-- Logo -->
    <a href="/" class="logo">
      <LogoSolidGroundAviation />
    </a>

    <!-- Desktop Menu -->
    <ul class="nav">
      {menu.map((item, index) => (
        <li class={`menu-item ${item.children ? "has-children" : ""}`} data-index={index}>
          <a href={item.url}>{item.label}</a>
          {item.children && (
            <ul class="sub-menu">
              {item.children.map((child) => (
                <li><a href={child.url}>{child.label}</a></li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>

    <!-- Buttons -->
    <div class="buttons">
      {buttons.map((button) => (
        <a href={button.href} class={button.style}>{button.text}</a>
      ))}
    </div>

    <!-- Mobile Hamburger -->
    <button id="mobile-toggle" class="hamburger" aria-label="Toggle menu">
      <span class="bar top"></span>
      <span class="bar middle"></span>
      <span class="bar bottom"></span>
    </button>
    
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="mobile-menu ">
    <ul>
      {menu.map((item, index) => (
        <li class="mobile-item" data-index={index}>
          <a href={item.url}>{item.label}</a>
          {item.children && (
            <ul class="mobile-submenu">
              {item.children.map((child) => (
                <li><a href={child.url}>{child.label}</a></li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>

    <div class="mobile-buttons">
      {buttons.map((button) => (
        <a href={button.href} class={button.style}>{button.text}</a>
      ))}
    </div>
  </div>

  
</nav>

<style>

.navbar {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 50;
  display: flex;
  justify-content: center;
  transition: all 0.5s ease;
}
.navbar.scrolled {
  background: rgba(255, 255, 255, 0.6);
  backdrop-filter: blur(8px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.05);
}

.container {
  max-width: 1200px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem 1rem;
}

.nav {
  display: flex;
  gap: 2rem;
  list-style: none;
}
.menu-item { 
  position: relative; 
  color: white; 
  transition: color 0.3s ease;
}
.menu-item a {
  font-weight: 500;
  text-transform: uppercase;
  transition: all 0.3s ease;
}
.menu-item a:hover {
  text-decoration: underline;
  text-underline-offset: 2px;
  color: oklch(83.7% 0.128 66.29);
}
.navbar.scrolled .menu-item {
  color: oklch(62.3% 0.214 259.815);
}

.navbar.scrolled .menu-item a {
  color: oklch(62.3% 0.214 259.815);
}

.navbar.scrolled .menu-item a:hover {
  color: oklch(83.7% 0.128 66.29);
}

.sub-menu {
  position: absolute;
  top: 100%;
  left: 0;
  background: #fff;
  border: 1px solid #ddd;
  list-style: none;
  padding: 0.5rem 0;
  display: none;
  transform: translateY(5px);
  transition: all 0.3s ease;
  color: oklch(62.3% 0.214 259.815);
}
.menu-item:hover .sub-menu {
  display: block;
}

.sub-menu li a {
  display: block;
  padding: 0.5rem 1rem;
  white-space: nowrap;
  transition: all 0.3s ease;
}
.sub-menu li a:hover {
  background: #007ecb;
  color: #fff;
  transform: scale(1.05);
}

.buttons a {
  margin-left: 1rem;
  padding: 0.5rem 1rem;
  border-radius: 1.5rem;
  text-decoration: none;
  transition: all 0.3s ease;
}
.buttons a:hover { filter: brightness(1.1);}

.hamburger {
  display: none;
  flex-direction: column;
  gap: 4px;
  background: none;
  border: none;
  cursor: pointer;
}
.bar { width: 24px; height: 2px; background: #333; transition: all 0.3s ease; }

.mobile-menu {
  position: absolute;
  width: 100%;
  height: 100vh;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  padding: 0 1rem;
  max-height: 0;
  overflow: hidden;
  transition: all 0.5s ease;
}
.mobile-menu.open {
  padding-top: 1rem;
  padding-bottom: 1rem;
  max-height: 100vh;
  overflow: visible;
}

.mobile-submenu {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease;
}

.mobile-item:hover .mobile-submenu { max-height: 20rem; }

.mobile-item > a::after {
  content: "â–¸";
  display: inline-block;
  margin-left: 0.5rem;
  transition: transform 0.3s ease;
}

.mobile-item .mobile-submenu.open + a::after,
.mobile-item a.open::after {
  transform: rotate(90deg);
}


/* Mobile submenu animation */
.mobile-submenu {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease, opacity 0.3s ease;
  opacity: 0;
}
.mobile-submenu.open {
  max-height: 20rem; /* or big enough to fit content */
  opacity: 1;
}

@media (max-width: 768px) {
  .nav, .buttons { display: none; }
  .hamburger { display: flex; }
}
</style>

<script type="module">
  const navbar = document.getElementById("navbar");
  const mobileToggle = document.getElementById("mobile-toggle");
  const mobileMenu = document.getElementById("mobile-menu");

  // Scroll effect
  window.addEventListener("scroll", () => {
    if (window.scrollY > 40) {
      navbar.classList.add("scrolled");
      
    } else {
      navbar.classList.remove("scrolled");
    }
  });

  // Mobile menu open/close
  mobileToggle?.addEventListener("click", () => {
    mobileMenu?.classList.toggle("open");
  });

  // Mobile submenu toggles
  const mobileItems = document.querySelectorAll(".mobile-item");

  mobileItems.forEach((item) => {
    const submenu = item.querySelector(".mobile-submenu");
    if (submenu) {
      item.querySelector("a").addEventListener("click", (e) => {
        e.preventDefault(); // prevent following link if has children
        submenu.classList.toggle("open");
      });
    }
  });

  
</script>
