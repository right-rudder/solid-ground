---
import { EMAIL_ADDRESS } from "../../data/consts";

class FAQsClass {
    title: string;
    content: string;

    constructor() {
        this.title = "";
        this.content = "";
    }
}

const { faqs = FAQsClass, type } = Astro.props;
---

<script>
    class Accordion {
        el;
        summary;
        content;
        animation: Animation;
        isClosing;
        isExpanding;

        constructor(el: HTMLDetailsElement) {
            // Store the <details> element
            this.el = el;
            // Store the <summary> element
            this.summary = el.querySelector("summary");
            // Store the <div class="content"> element
            this.content = el.querySelector("div");

            // Store the animation object (so we can cancel it if needed)
            this.animation = new Animation();
            // Store if the element is closing
            this.isClosing = false;
            // Store if the element is expanding
            this.isExpanding = false;
            // Detect user clicks on the summary element
            this.summary?.addEventListener("click", (e) => this.onClick(e));
        }

        onClick(e: MouseEvent) {
            // Stop default behaviour from the browser
            e.preventDefault();
            // Add an overflow on the <details> to avoid content overflowing
            this.el.style.overflow = "hidden";
            // Check if the element is being closed or is already closed
            if (this.isClosing || !this.el.open) {
                this.open();
                // Check if the element is being openned or is already open
            } else if (this.isExpanding || this.el.open) {
                this.shrink();
            }
        }

        shrink() {
            // Set the element as "being closed"
            this.isClosing = true;

            // Store the current height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the height of the summary
            const endHeight = `${this.summary?.offsetHeight}px`;

            // If there is already an animation running
            if (this.animation) {
                // Cancel the current animation
                this.animation.cancel();
            }

            // Start a WAAPI animation
            this.animation = this.el.animate(
                {
                    // Set the keyframes from the startHeight to endHeight
                    height: [startHeight, endHeight],
                },
                {
                    duration: 400,
                    easing: "ease-out",
                }
            );

            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(false);
            // If the animation is cancelled, isClosing variable is set to false
            this.animation.oncancel = () => (this.isClosing = false);
        }

        open() {
            // Apply a fixed height on the element
            this.el.style.height = `${this.el.offsetHeight}px`;
            // Force the [open] attribute on the details element
            this.el.open = true;
            // Wait for the next frame to call the expand function
            window.requestAnimationFrame(() => this.expand());
        }

        expand() {
            // Set the element as "being expanding"
            this.isExpanding = true;
            // Get the current fixed height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the open height of the element (summary height + content height)
            const summaryHeight = this.summary?.offsetHeight || 0;
            const contentHeight = this.content?.offsetHeight || 0;

            const endHeight = `${summaryHeight + contentHeight}px`;

            // If there is already an animation running
            if (this.animation) {
                // Cancel the current animation
                this.animation.cancel();
            }

            // Start a WAAPI animation
            this.animation = this.el.animate(
                {
                    // Set the keyframes from the startHeight to endHeight
                    height: [startHeight, endHeight],
                },
                {
                    duration: 400,
                    easing: "ease-out",
                }
            );
            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(true);
            // If the animation is cancelled, isExpanding variable is set to false
            this.animation.oncancel = () => (this.isExpanding = false);
        }

        onAnimationFinish(open: boolean) {
            // Set the open attribute based on the parameter
            this.el.open = open;
            // Clear the stored animation
            this.animation = new Animation();
            // Reset isClosing & isExpanding
            this.isClosing = false;
            this.isExpanding = false;
            // Remove the overflow hidden and the fixed height
            this.el.style.height = this.el.style.overflow = "";
        }
    }

    document.querySelectorAll("details").forEach((el) => {
        new Accordion(el);
    });
</script>

<style>
    details > summary {
        height: 100%;
    }

    details[open] > summary {
        height: auto;
    }

    summary:before {
        content: "";
        border-width: 0.4rem;
        border-style: solid;
        border-color: transparent transparent transparent #464646;
        position: absolute;
        top: 1.3rem;
        left: 1rem;
        transform: rotate(0);
        transform-origin: 0.2rem 50%;
        transition: 0.25s transform ease;
    }
    
    details[open] > summary:before {
        transform: rotate(90deg);
    }

    details summary::-webkit-details-marker {
        display: none;
    }
</style>

<div style={{ backgroundColor: "#ffffff" }}>
    <div
        style={{
            maxWidth: "1120px",
            margin: "0 auto",
            padding: "2rem 1.5rem",
            textAlign: "center",
        }}
    >
        <div
            style={{
                maxWidth: "80rem",
                margin: "0 auto",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
            }}
        >
            <p
                style={{
                    marginTop: "3rem",
                    textTransform: "uppercase",
                    fontSize: "1.125rem", // lg:text-lg
                    fontFamily: '"Open Sans Variable", sans-serif',
                    fontWeight: "700",
                    textAlign: "center",
                    letterSpacing: "0.05em",
                    color: "#ffca48", // text-accent-300
                    maxWidth: "768px",
                    marginLeft: "auto",
                    marginRight: "auto",
                }}
            >
                {type}
            </p>

            <h2
                style={{
                    marginTop: "0.75rem",
                    marginBottom: "0.75rem",
                    fontSize: "2.25rem", // text-4xl
                    lineHeight: "2.5rem",
                    fontFamily: '"Kanit", sans-serif',
                    fontWeight: "700",
                    textAlign: "center",
                    letterSpacing: "0.05em",
                    color: "#055587", // text-primary-700
                    maxWidth: "768px",
                    marginLeft: "auto",
                    marginRight: "auto",
                    textTransform: "uppercase",
                }}
            >
                Frequently Asked Questions
            </h2>

            <dl
                style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "0.5rem",
                    marginTop: "1.5rem",
                    width: "100%",
                    justifyContent: "stretch",
                    alignItems: "stretch",
                }}
            >
                {
                    faqs.map((faq: FAQsClass, index: number) => (
                        /* <details key={index} class="w-full"> */
                        <details class="w-full">
                            <summary
                                style={{
                                    cursor: "pointer",
                                    fontWeight: "600",
                                    color: "#464646",
                                    background: "#dcdcdc",
                                    borderRadius: "0.5rem",
                                    textAlign: "initial",
                                    listStyle: "none",
                                    position: "relative",
                                    padding: "1rem 1rem 1rem 2rem",
                                }}
                            >
                                {faq.title}
                            </summary>
                            <div
                                style={{
                                    marginTop: "0.5rem",
                                    color: "#656565",
                                    width: "100%",
                                    textAlign: "initial",
                                }}
                                set:html={faq.content}
                            />
                        </details>
                    ))
                }
            </dl>
        </div>

        <a
            href="/contact"
            style={{
                color: "#ffffff",
                background: "#0067a9", // text-primary-700
                padding: "0.75rem 1.5rem",
                borderRadius: "1.5rem",
                fontWeight: "600",
                display: "inline-block",
                marginTop: "3rem",
                textAlign: "center",
                maxWidth: "200px",
                marginLeft: "auto",
                marginRight: "auto",
                textDecoration: "none",
            }}
        >
            Contact Us
        </a>
    </div>
</div>
